# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_dispatch:

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false 
      
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]  
        build_type: [Release]
        include:
        - os: ubuntu-latest
          c_compiler: gcc
          cpp_compiler: g++
        - os: macos-latest
          c_compiler: clang
          cpp_compiler: clang++
        - os: windows-latest
          c_compiler: cl
          cpp_compiler: cl 
          
    steps:
    - uses: actions/checkout@v4  
  
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    
    - name: Configure CMake (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${GITHUB_WORKSPACE}/source

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} `
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} `
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
              -S ${{ github.workspace }}\source

    # ###########################   Build   #########################################################    
      
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}       


    #   ###########################   Upload Release   #########################################################
    - name: Prepare directories and copy files (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}"
        $filesDir = "${{ github.workspace }}\files"
        $releaseDir = Join-Path -Path $buildOutputDir -ChildPath 'release_out'
        
        # cоздание директорий
        New-Item -ItemType Directory -Force -Path $releaseDir
        
        # Копирование файлов и директорий
        Copy-Item -Recurse -Force -Path (Join-Path -Path $buildOutputDir -ChildPath 'Release\*') -Destination $releaseDir
        Copy-Item -Recurse -Force -Path "$filesDir\*" -Destination $releaseDir

    - name: Archive files (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        $buildOutputDir = "${{ steps.strings.outputs.build-output-dir }}"
        $releaseDir = Join-Path -Path $buildOutputDir -ChildPath 'release_out'
        $archivePath = Join-Path -Path $buildOutputDir -ChildPath 'fashio_mnist.zip'
        
        Compress-Archive -Path $releaseDir -DestinationPath $archivePath -Force

      
    - name: Prepare directories for archiving (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/release_out  
        cp -r ${{ steps.strings.outputs.build-output-dir }}/fashio_mnist ${{ steps.strings.outputs.build-output-dir }}/release_out
        cp -r ${GITHUB_WORKSPACE}/files/* ${{ steps.strings.outputs.build-output-dir }}/release_out
                
    - name: Archive server files (Ubuntu & macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        tar -czf fashio_mnist.tar.gz release_out


    - name: Upload Release Asset (Ubuntu & macOS)
      if: ${{ success() && matrix.os != 'windows-latest' }}    
      id: upload-release-asset-server
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/fashio_mnist.tar.gz
        asset_name: fashio_mnist-${{ matrix.os }}-0.0.${{ github.run_number }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: ${{ success() && matrix.os == 'windows-latest' }}
      id: upload-release-asset-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}\fashio_mnist.zip
        asset_name: fashio_mnist-${{ matrix.os }}-0.0.${{ github.run_number }}.zip
        asset_content_type: application/zip
